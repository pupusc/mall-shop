<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wanmi.sbc.crm.customgroup.mapper.CustomGroupMapper">
  <resultMap id="BaseResultMap" type="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="group_name" jdbcType="VARCHAR" property="groupName" />
    <result column="definition" jdbcType="VARCHAR" property="definition" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_person" jdbcType="VARCHAR" property="createPerson" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_person" jdbcType="VARCHAR" property="updatePerson" />
    <result column="customer_tags" jdbcType="VARCHAR" property="customerTags" />
    <result column="preference_tags" jdbcType="VARCHAR" property="preferenceTags" />
    <result column="auto_tags" jdbcType="VARCHAR" property="autoTags" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    <result column="group_detail" jdbcType="LONGVARCHAR" property="groupDetail" />
  </resultMap>
  <sql id="Base_Column_List">
    id, group_name, `definition`, create_time, create_person, update_time, update_person, preference_tags, customer_tags
  </sql>
  <sql id="Blob_Column_List">
    group_detail
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from custom_group
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from custom_group
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    insert into custom_group (id, group_name, `definition`, 
      create_time, create_person, update_time,
      update_person, group_detail,customer_tags,preference_tags,auto_tags)
    values (#{id,jdbcType=BIGINT}, #{groupName,jdbcType=VARCHAR}, #{definition,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{createPerson,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updatePerson,jdbcType=VARCHAR}, #{groupDetail,jdbcType=LONGVARCHAR},#{customerTags,jdbcType=VARCHAR},
       #{preferenceTags,jdbcType=VARCHAR}, #{autoTags,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    insert into custom_group
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="groupName != null">
        group_name,
      </if>
      <if test="definition != null">
        `definition`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createPerson != null">
        create_person,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updatePerson != null">
        update_person,
      </if>
      <if test="groupDetail != null">
        group_detail,
      </if>
      <if test="customerTags != null">
        customer_tags,
      </if>
      <if test="preferenceTags != null">
        preference_tags,
      </if>
      <if test="autoTags != null">
        auto_tags,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="groupName != null">
        #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="definition != null">
        #{definition,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createPerson != null">
        #{createPerson,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatePerson != null">
        #{updatePerson,jdbcType=VARCHAR},
      </if>
      <if test="groupDetail != null">
        #{groupDetail,jdbcType=LONGVARCHAR},
      </if>
      <if test="customerTags != null">
        #{customerTags,jdbcType=VARCHAR},
      </if>
      <if test="preferenceTags != null">
        #{preferenceTags,jdbcType=VARCHAR}
      </if>
      <if test="autoTags != null">
        #{autoTags,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    update custom_group
    <set>
      <if test="groupName != null">
        group_name = #{groupName,jdbcType=VARCHAR},
      </if>
      <if test="definition != null">
        `definition` = #{definition,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createPerson != null">
        create_person = #{createPerson,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatePerson != null">
        update_person = #{updatePerson,jdbcType=VARCHAR},
      </if>
      <if test="groupDetail != null">
        group_detail = #{groupDetail,jdbcType=LONGVARCHAR},
      </if>
      <if test="customerTags != null">
        customer_tags = #{customerTags,jdbcType=VARCHAR},
      </if>
      <if test="preferenceTags != null">
        preference_tags = #{preferenceTags,jdbcType=VARCHAR},
      </if>
      <if test="autoTags != null">
        auto_tags = #{autoTags,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    update custom_group
    set group_name = #{groupName,jdbcType=VARCHAR},
      `definition` = #{definition,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_person = #{createPerson,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_person = #{updatePerson,jdbcType=VARCHAR},
      group_detail = #{groupDetail,jdbcType=LONGVARCHAR},
      customer_tags = #{customerTags,jdbcType=VARCHAR},
      preference_tags = #{preferenceTags,jdbcType=VARCHAR},
      auto_tags = #{autoTags,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wanmi.sbc.crm.customgroup.model.CustomGroup">
    update custom_group
    set group_name = #{groupName,jdbcType=VARCHAR},
      `definition` = #{definition,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_person = #{createPerson,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_person = #{updatePerson,jdbcType=VARCHAR},
      customer_tags = #{customerTags,jdbcType=VARCHAR},
      preference_tags = #{preferenceTags,jdbcType=VARCHAR},
      auto_tags = #{autoTags,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectList" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List"/>,
    IFNULL(cgs.customer_count,0) customerCount
    from custom_group cg
    left join (
        select group_id,customer_count
        from custom_group_statistics
        where stat_date = (select max(stat_date) from custom_group_statistics)
    ) cgs on(cg.id=cgs.group_id)
    order by create_time desc
  </select>

  <select id="selectListForParam" resultMap="ResultMapWithBLOBs" parameterType="com.wanmi.sbc.crm.api.request.customgroup.CustomGroupListParamRequest">
    select
    cg.id,
    group_name,
    `definition`,
    preference_tags,
    customer_tags,
    group_detail,
    IFNULL(cgs.customer_count,0) customerCount
    from custom_group cg
    <if test="customerId != null and customerId != ''">
      inner join custom_group_rel cgr on cgr.group_id = cg.id and customer_id = #{customerId}
    </if>
    left join (
    select group_id,customer_count
    from custom_group_statistics
    where stat_date = (select max(stat_date) from custom_group_statistics)
    ) cgs on(cg.id=cgs.group_id)
    order by cg.create_time desc
  </select>

  <select id="selectCount" resultType="java.lang.Integer">
    select count(id) from custom_group
  </select>

  <select id="checkCustomerTag" resultType="java.lang.Integer">

    select count(1) from custom_group where customer_tags like concat('%"',#{tagId},'"%')
  </select>
    <select id="selectAll" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from custom_group
    </select>

    <select id = "countByGroupIds" resultType="java.lang.Long">
        select sum(c.o) from
        (
        select count(1) o from ${crmDB}custom_group a
        where a.id in
        (
        <if test="customGroupList !=null and customGroupList.size()>0">
            <foreach collection="customGroupList" item="item" separator=","  index="">
                #{item}
            </foreach>
        </if>
        <if test="customGroupList == null or customGroupList.size()==0">
            null
        </if>
        )
        union
        (
        select count(1) o from ${crmDB}rfm_system_group b
        where b.id in
        (
        <if test="sysGroupList !=null and sysGroupList.size()>0">
            <foreach collection="sysGroupList" item="item" separator="," index="">
                #{item}
            </foreach>
        </if>
        <if test="sysGroupList == null or sysGroupList.size()==0">
            null
        </if>
        )
        )
        )c
    </select>

    <select id="countByPreferenceTags" resultType="java.lang.Long">
      select count(1) from custom_group where preference_tags like concat('%"',#{tagId},'-%')
    </select>

    <select id="countByAutoTags" resultType="java.lang.Long">
      select count(1) from custom_group where auto_tags like concat('%"',#{tagId},'"%')
    </select>
</mapper>