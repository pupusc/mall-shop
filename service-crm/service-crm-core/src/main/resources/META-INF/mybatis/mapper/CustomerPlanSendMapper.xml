<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wanmi.sbc.crm.customerplan.mapper.CustomerPlanSendMapper">
    <resultMap id="BaseResultMap" type="com.wanmi.sbc.crm.customerplan.model.CustomerPlanSend">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="plan_id" jdbcType="BIGINT" property="planId"/>
        <result column="customer_id" jdbcType="VARCHAR" property="customerId"/>
        <result column="point_flag" jdbcType="BIT" property="pointFlag"/>
        <result column="coupon_flag" jdbcType="BIT" property="couponFlag"/>
        <result column="sms_flag" jdbcType="BIT" property="smsFlag"/>
        <result column="app_push_flag" jdbcType="BIT" property="appPushFlag"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, plan_id, customer_id, point_flag, coupon_flag, sms_flag, app_push_flag, create_time
  </sql>
    <sql id="selectPlanCustomerSql">
    SELECT
	  c.planId,
	  c.customerId
    FROM
    (
      SELECT
          a.planId,
          b.customer_id customerId
      FROM
          ( SELECT id planId, substr( receive_value, 3 ) groupId FROM customer_plan WHERE trigger_flag=0 AND  receive_type = 2 AND receive_value LIKE '0_%' ) a
      JOIN rfm_customer_detail b ON ( a.groupId = b.system_group_id )
      WHERE
          stat_date = #{statDate}
	) c
	LEFT JOIN ( SELECT customer_id FROM customer_plan_send ) d ON c.customerId = d.customer_id
    WHERE
        d.customer_id IS NULL

    UNION ALL

    SELECT
	  c.planId,
	  c.customerId
    FROM
    (
      SELECT
          a.planId,
          b.customer_id customerId
      FROM
          ( SELECT id planId, substr( receive_value, 3 ) groupId FROM customer_plan WHERE trigger_flag=0 AND  receive_type = 2 AND receive_value LIKE '1_%' ) a
          JOIN custom_group_rel b ON ( a.groupId = b.group_id )
    ) c
    LEFT JOIN ( SELECT customer_id FROM customer_plan_send ) d ON c.customerId = d.customer_id
    WHERE
        d.customer_id IS NULL

  </sql>

    <sql id="selectBySystemGroupCustomerSql">
        SELECT
            b.customerId
        FROM
            (
        SELECT
            a.customer_id customerId
        FROM
            rfm_customer_detail a
        WHERE
            stat_date = #{statDate} and a.system_group_id = #{groupId,jdbcType=BIGINT}
            ) b
            LEFT JOIN ( SELECT customer_id FROM customer_plan_send where plan_id=#{planId,jdbcType=BIGINT}) c ON b.customerId = c.customer_id
        WHERE
            c.customer_id IS NULL
    </sql>

    <sql id="selectByCustomGroupCustomerSql">
        SELECT
            b.customerId
        FROM
            (
            SELECT
                a.customer_id customerId
            FROM
                custom_group_rel a
            WHERE
                 a.group_id = #{groupId,jdbcType=BIGINT}
            ) b
            LEFT JOIN ( SELECT customer_id FROM customer_plan_send where plan_id=#{planId,jdbcType=BIGINT}) c ON b.customerId = c.customer_id
        WHERE
            c.customer_id IS NULL
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from customer_plan_send
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from customer_plan_send
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.wanmi.sbc.crm.customerplan.model.CustomerPlanSend">
    insert into customer_plan_send (id, plan_id, customer_id, 
      point_flag, coupon_flag, sms_flag, 
      app_push_flag, create_time)
    values (#{id,jdbcType=BIGINT}, #{planId,jdbcType=BIGINT}, #{customerId,jdbcType=VARCHAR}, 
      #{pointFlag,jdbcType=BIT}, #{couponFlag,jdbcType=BIT}, #{smsFlag,jdbcType=BIT}, 
      #{appPushFlag,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP})
  </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.wanmi.sbc.crm.customerplan.model.CustomerPlanSend">
        update customer_plan_send
        <set>
            <if test="planId != null">
                plan_id = #{planId,jdbcType=BIGINT},
            </if>
            <if test="customerId != null">
                customer_id = #{customerId,jdbcType=VARCHAR},
            </if>
            <if test="pointFlag != null">
                point_flag = #{pointFlag,jdbcType=BIT},
            </if>
            <if test="couponFlag != null">
                coupon_flag = #{couponFlag,jdbcType=BIT},
            </if>
            <if test="smsFlag != null">
                sms_flag = #{smsFlag,jdbcType=BIT},
            </if>
            <if test="appPushFlag != null">
                app_push_flag = #{appPushFlag,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <where>
            <if test="id != null">
                and id = #{id,jdbcType=BIGINT}
            </if>
            <if test=" idList != null and idList.size() > 0">
                and id in
                <foreach collection="idList" item="item" separator="," open="(" close=")" index="">
                    #{item,jdbcType=BIGINT}
                </foreach>
            </if>
        </where>
    </update>
    <update id="updateByPrimaryKey" parameterType="com.wanmi.sbc.crm.customerplan.model.CustomerPlanSend">
    update customer_plan_send
    set plan_id = #{planId,jdbcType=BIGINT},
      customer_id = #{customerId,jdbcType=VARCHAR},
      point_flag = #{pointFlag,jdbcType=BIT},
      coupon_flag = #{couponFlag,jdbcType=BIT},
      sms_flag = #{smsFlag,jdbcType=BIT},
      app_push_flag = #{appPushFlag,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <insert id="insertSelect">
        insert into customer_plan_send(
        customer_id,
        plan_id,
        point_flag,
        coupon_flag,
        sms_flag,
        app_push_flag,
        create_time)
        select
        customerId,
        ${planId},
        ${pointFlag},
        ${couponFlag},
        ${smsFlag},
        ${appPushFlag},
        now()
        from (
        <if test="groupType == 0">
            <include refid="selectBySystemGroupCustomerSql"/>
        </if>
        <if test="groupType == 1">
            <include refid="selectByCustomGroupCustomerSql"/>
        </if>
        )t limit #{giftPackageTotal}
    </insert>

    <select id="selectByType" resultMap="BaseResultMap">
        select id, plan_id, customer_id, point_flag, coupon_flag, sms_flag, app_push_flag  from customer_plan_send
        where
            plan_id = #{planId,jdbcType=BIGINT}
            and (
                point_flag = 1
                or coupon_flag = 1
                or sms_flag = 1
                or app_push_flag = 1
            )

    </select>

    <select id="selectGiftCount" parameterType="com.wanmi.sbc.crm.customerplan.model.CustomerPlanSend"
            resultType="java.lang.Long">
        SELECT
        <if test="isRepeat == 1">
            count(DISTINCT(b.customer_id ))
        </if>
        <if test="isRepeat == 0">
            count(b.customer_id)
        </if>
        FROM
        (
        SELECT
        customer_id
        FROM
        customer_plan_send
        WHERE
        plan_id = #{planId,jdbcType=BIGINT}
        AND
        <if test="isOnlyCoupon == 0">
            <include refid="selectByCoupon"/>
        </if>
        <if test="isOnlyCoupon == 1">
            <include refid="selectByGift"/>
        </if>
        UNION ALL
        SELECT
        customer_id
        FROM
        customer_plan_trigger_send
        WHERE
        plan_id = #{planId,jdbcType=BIGINT}
        AND
        <if test="isOnlyCoupon == 0">
            <include refid="selectByCoupon"/>
        </if>
        <if test="isOnlyCoupon == 1">
            <include refid="selectByGift"/>
        </if>
        ) b
    </select>

    <sql id="selectByGift">
       ( point_flag = 2 OR coupon_flag = 2 )
    </sql>

    <sql id="selectByCoupon">
        coupon_flag = 2
    </sql>

    <!--覆盖人数-->
    <select id="selectCoversCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(distinct planCustomer.customer_id)
        FROM
        ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM customer_plan_trigger_send ) planCustomer
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        DATE_FORMAT( NOW( ), '%Y-%m-%d' ) <![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
        and planCustomer.plan_id = #{planId,jdbcType=BIGINT}
    </select>
    <!--访客数uv-->
    <select id="selectVisitorsUvCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(distinct planCustomer.customer_id)
        FROM
        s2b_statistics.replay_flow_day_user_info fu
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on planCustomer.customer_id = fu.user_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT}
        <include refid="selectByDateOther"/>
    </select>
    <!--下单人数-->
    <select id="selectOrderPersonCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(distinct rt.customer_id)
        FROM
        s2b_statistics.replay_trade rt
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on rt.customer_id = planCustomer.customer_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT}
        <include refid="selectByDate"/>
    </select>
    <!--下单笔数-->
    <select id="selectOrderCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(rt.tid)
        FROM
        s2b_statistics.replay_trade rt
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on rt.customer_id = planCustomer.customer_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT}
        <include refid="selectByDate"/>
    </select>
    <!--付款人数-->
    <select id="selectPayPersonCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(distinct rt.customer_id)
        FROM
        s2b_statistics.replay_trade rt
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on rt.customer_id = planCustomer.customer_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT} and rt.pay_state = 2
        <include refid="selectByDate"/>
    </select>
    <!--付款金额-->
    <select id="selectTotalPrice" parameterType="java.lang.Long"
            resultType="java.math.BigDecimal">
        SELECT
        IFNULL(sum(rt.total_price), 0)
        FROM
        s2b_statistics.replay_trade rt
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on rt.customer_id = planCustomer.customer_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT} and rt.pay_state = 2
        <include refid="selectByDate"/>
    </select>
    <!--付款笔数-->
    <select id="selectPayCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT
        count(rt.tid)
        FROM
        s2b_statistics.replay_trade rt
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on rt.customer_id = planCustomer.customer_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT} and rt.pay_state = 2
        <include refid="selectByDate"/>
    </select>
    <!--付款笔数-->
    <select id="selectVisitorsCount" parameterType="java.lang.Long"
            resultType="java.lang.Long">
        SELECT count(*) from
        (select * from
        (
        SELECT
        DISTINCT(planCustomer.customer_id)
        FROM
        ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        DATE_FORMAT( NOW( ), '%Y-%m-%d' ) <![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
        and planCustomer.plan_id = #{planId,jdbcType=BIGINT}
        UNION All
        SELECT
        distinct(planCustomer.customer_id)
        FROM
        s2b_statistics.replay_flow_day_user_info fu
        left join ( SELECT plan_id, customer_id FROM customer_plan_send UNION SELECT plan_id, customer_id FROM
        customer_plan_trigger_send ) planCustomer on planCustomer.customer_id = fu.user_id
        LEFT JOIN customer_plan cp ON cp.id = planCustomer.plan_id
        WHERE
        planCustomer.plan_id = #{planId,jdbcType=BIGINT}
        <include refid="selectByDateOther"/>
        ) customer1 GROUP BY customer1.customer_id HAVING COUNT(*) = 2) target
    </select>
    <sql id="selectByDate">
        and DATE_FORMAT( NOW( ), '%Y-%m-%d' ) <![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
        and DATE_FORMAT( rt.create_time, '%Y-%m-%d' ) <![CDATA[ >= ]]> cp.start_date
        and DATE_FORMAT( rt.create_time, '%Y-%m-%d' )<![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
    </sql>
    <sql id="selectByDateOther">
        and DATE_FORMAT( NOW( ), '%Y-%m-%d' ) <![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
        and DATE_FORMAT( fu.flow_date, '%Y-%m-%d' ) <![CDATA[ >= ]]> cp.start_date
        and DATE_FORMAT( fu.flow_date, '%Y-%m-%d' ) <![CDATA[ <= ]]> date_add( cp.end_date, INTERVAL 2 DAY )
    </sql>

</mapper>