package com.wanmi.sbc.marketing.common.service;import com.wanmi.sbc.common.base.MicroServicePage;import com.wanmi.sbc.common.enums.BoolFlag;import com.wanmi.sbc.common.enums.DeleteFlag;import com.wanmi.sbc.common.enums.Platform;import com.wanmi.sbc.common.exception.SbcRuntimeException;import com.wanmi.sbc.common.util.CommonErrorCode;import com.wanmi.sbc.common.util.DateUtil;import com.wanmi.sbc.common.util.KsBeanUtil;import com.wanmi.sbc.common.util.StringUtil;import com.wanmi.sbc.customer.api.provider.store.StoreQueryProvider;import com.wanmi.sbc.customer.api.request.store.StoreByIdRequest;import com.wanmi.sbc.customer.api.response.store.StoreByIdResponse;import com.wanmi.sbc.goods.api.provider.info.GoodsInfoQueryProvider;import com.wanmi.sbc.goods.api.request.info.GoodsInfoViewPageRequest;import com.wanmi.sbc.goods.api.response.info.GoodsInfoResponse;import com.wanmi.sbc.goods.api.response.info.GoodsInfoViewPageResponse;import com.wanmi.sbc.goods.bean.enums.AddedFlag;import com.wanmi.sbc.goods.bean.enums.CheckStatus;import com.wanmi.sbc.goods.bean.vo.GoodsInfoResponseVO;import com.wanmi.sbc.marketing.MarketingPluginService;import com.wanmi.sbc.marketing.api.request.buyoutprice.MarketingBuyoutPriceSearchRequest;import com.wanmi.sbc.marketing.bean.enums.MarketingScopeType;import com.wanmi.sbc.marketing.bean.enums.MarketingSubType;import com.wanmi.sbc.marketing.bean.enums.MarketingType;import com.wanmi.sbc.marketing.bean.vo.*;import com.wanmi.sbc.marketing.buyoutprice.model.entry.MarketingBuyoutPriceLevel;import com.wanmi.sbc.marketing.buyoutprice.repository.MarketingBuyoutPriceLevelRepository;import com.wanmi.sbc.marketing.common.model.root.Marketing;import com.wanmi.sbc.marketing.common.model.root.MarketingScope;import com.wanmi.sbc.marketing.common.repository.MarketingRepository;import com.wanmi.sbc.marketing.common.repository.MarketingScopeRepository;import com.wanmi.sbc.marketing.common.request.MarketingQueryListRequest;import com.wanmi.sbc.marketing.common.request.MarketingRequest;import com.wanmi.sbc.marketing.common.request.MarketingSaveRequest;import com.wanmi.sbc.marketing.common.request.SkuExistsRequest;import com.wanmi.sbc.marketing.common.response.MarketingResponse;import com.wanmi.sbc.marketing.discount.model.entity.MarketingFullDiscountLevel;import com.wanmi.sbc.marketing.discount.model.entity.MarketingPointBuyLevel;import com.wanmi.sbc.marketing.discount.repository.MarketingFullDiscountLevelRepository;import com.wanmi.sbc.marketing.discount.repository.MarketingPointBuyLevelRepository;import com.wanmi.sbc.marketing.gift.model.root.MarketingFullGiftDetail;import com.wanmi.sbc.marketing.gift.model.root.MarketingFullGiftLevel;import com.wanmi.sbc.marketing.gift.service.MarketingFullGiftService;import com.wanmi.sbc.marketing.halfpricesecondpiece.model.entry.MarketingHalfPriceSecondPieceLevel;import com.wanmi.sbc.marketing.halfpricesecondpiece.repository.HalfPriceSecondPieceLevelRepository;import com.wanmi.sbc.marketing.markup.model.root.MarkupLevel;import com.wanmi.sbc.marketing.markup.model.root.MarkupLevelDetail;import com.wanmi.sbc.marketing.markup.service.MarkupService;import com.wanmi.sbc.marketing.reduction.model.entity.MarketingFullReductionLevel;import com.wanmi.sbc.marketing.reduction.repository.MarketingFullReductionLevelRepository;import com.wanmi.sbc.marketing.util.XssUtils;import com.wanmi.sbc.marketing.util.error.MarketingErrorCode;import org.apache.commons.collections4.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.hibernate.SQLQuery;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.Query;import javax.persistence.criteria.Expression;import javax.persistence.criteria.Predicate;import java.time.LocalDateTime;import java.util.*;import java.util.stream.Collectors;@Servicepublic class MarketingService {    @Autowired    private MarketingRepository marketingRepository;    @Autowired    private EntityManager entityManager;    @Autowired    private MarketingScopeRepository marketingScopeRepository;    @Autowired    private MarketingFullDiscountLevelRepository marketingFullDiscountLevelRepository;    @Autowired    private MarketingPointBuyLevelRepository marketingPointBuyLevelRepository;    @Autowired    private MarkupService markupService;    @Autowired    private MarketingFullReductionLevelRepository marketingFullReductionLevelRepository;    @Autowired    private MarketingBuyoutPriceLevelRepository marketingBuyoutPriceLevelRepository;    @Autowired    private MarketingFullGiftService marketingFullGiftService;    @Autowired    private GoodsInfoQueryProvider goodsInfoQueryProvider;    @Autowired    private HalfPriceSecondPieceLevelRepository halfPriceSecondPieceLevelRepository;    @Autowired    private StoreQueryProvider storeQueryProvider;    @Autowired    private MarketingPluginService marketingPluginService;    /**     * 获取当前活动类型+时间段，是否有已经绑定的sku     *     * @param storeId     * @param skuExistsRequest     * @return     */    public List<String> getExistsSkuByMarketingType(Long storeId, SkuExistsRequest skuExistsRequest) {        if (skuExistsRequest.getExcludeId() == null) {            return marketingRepository.getExistsSkuByMarketingTypeRongQi(skuExistsRequest.getSkuIds()                    , skuExistsRequest.getMarketingType(), skuExistsRequest.getStartTime()                    , skuExistsRequest.getEndTime(), storeId);        }        return marketingRepository.getExistsSkuByMarketingTypeRongQi(skuExistsRequest.getSkuIds()                , skuExistsRequest.getMarketingType(), skuExistsRequest.getStartTime()                , skuExistsRequest.getEndTime(), storeId, skuExistsRequest.getExcludeId());    }    /**     *  加价购 当前活动类型+时间段 已绑定换购商品     * @param storeId     * @param skuExistsRequest     * @return     */    public List<String> getExistsMarkupSkuBy(Long storeId, SkuExistsRequest skuExistsRequest) {        return marketingRepository.getExistsMarkupSkuBy(skuExistsRequest.getMarkupSkuIds()                , skuExistsRequest.getMarketingType().toValue(), skuExistsRequest.getStartTime()                , skuExistsRequest.getEndTime(), storeId, skuExistsRequest.getExcludeId());    }    /**     * 分页查询营销列表     *     * @param request     * @param storeId     * @return     */    public MicroServicePage<MarketingPageVO> getMarketingPage(MarketingQueryListRequest request, Long storeId) {        //查询列表        String sql = "SELECT t.* FROM marketing t ";        //查询记录的总数量        String countSql = "SELECT count(1) count FROM marketing t ";        //条件查询        String whereSql = "WHERE 1 = 1";        if (storeId != null) {            whereSql += " AND t.store_id = :storeId";        }        if (request.getDelFlag() != null) {            whereSql += " AND t.del_flag = :delFlag";        }        if (StringUtils.isNotBlank(request.getMarketingName())) {            whereSql += " AND t.marketing_name LIKE concat('%',:marketingName,'%') ";        }        if (request.getMarketingType() != null) {            whereSql += " AND t.marketing_type = :marketingType";        }        if (CollectionUtils.isNotEmpty(request.getMarketingTypeList())) {            whereSql += " AND t.marketing_type in (:marketingTypeList)";        }        if (request.getMarketingSubType() != null) {            whereSql += " AND t.sub_type = :marketingSubType";        }else {            whereSql += " AND t.sub_type != "+MarketingSubType.MARKUP.toValue();        }        if (request.getStartTime() != null) {            whereSql += " AND :startTime <= t.begin_time ";        }        if (request.getEndTime() != null) {            whereSql += " AND :endTime >= t.end_time ";        }        if (request.getTargetLevelId() != null) {            whereSql += " AND find_in_set( :targetLevelId , t.join_level)";        }        if (CollectionUtils.isNotEmpty(request.getStoreIds())) {            whereSql += " AND t.store_id in (:storeIds)";        }        switch (request.getQueryTab()) {            case STARTED://进行中                whereSql += " AND now() >= t.begin_time AND now() <= t.end_time AND t.is_pause = 0";                break;            case PAUSED://暂停中                whereSql += " AND now() >= t.begin_time AND now() <= t.end_time AND t.is_pause = 1";                break;            case NOT_START://未开始                whereSql += " AND now() < t.begin_time";                break;            case ENDED://已结束                whereSql += " AND now() > t.end_time";                break;            case S_NS: // 进行中&未开始                whereSql += " AND now() <= t.end_time AND t.is_pause = 0";                break;            default:                break;        }        whereSql += " order by t.create_time desc";        Query query = entityManager.createNativeQuery(sql.concat(whereSql));        //组装查询参数        this.wrapperQueryParam(query, request, storeId);        query.setFirstResult(request.getPageNum() * request.getPageSize());        query.setMaxResults(request.getPageSize());        query.unwrap(SQLQuery.class).addEntity("t", Marketing.class);        List<MarketingPageVO> responsesList = ((List<Marketing>) query.getResultList()).stream().map(source -> {            MarketingPageVO response = new MarketingPageVO();            BeanUtils.copyProperties(source, response);            return response;        }).collect(Collectors.toList());        long count = 0;        if (CollectionUtils.isNotEmpty(responsesList)) {            Query queryCount = entityManager.createNativeQuery(countSql.concat(whereSql));            //组装查询参数            this.wrapperQueryParam(queryCount, request, storeId);            count = Long.parseLong(queryCount.getSingleResult().toString());        }        return new MicroServicePage<>(responsesList, request.getPageable(), count);    }    /**     * 保存营销信息     *     * @param request     * @return     * @throws SbcRuntimeException     */    @Transactional(rollbackFor = Exception.class)    public Marketing addMarketing(MarketingSaveRequest request) throws SbcRuntimeException {        this.validParam(request);        Marketing marketing = request.generateMarketing();        if (request.getMarketingId() != null) {            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);        }        marketing.setCreateTime(LocalDateTime.now());        marketing.setDelFlag(DeleteFlag.NO);        marketing.setIsPause(BoolFlag.NO);        marketing.setMarketingType(request.getMarketingType());        // 营销规则        marketing = marketingRepository.save(marketing);        // 保存营销和商品关联关系        this.saveScopeList(request.generateMarketingScopeList(marketing.getMarketingId()));        return marketing;    }    /**     * 修改营销信息     */    @Transactional(rollbackFor = Exception.class)    public Marketing modifyMarketing(MarketingSaveRequest request) throws SbcRuntimeException {        this.validParam(request);        Marketing marketing = marketingRepository.findById(request.getMarketingId())                .orElseThrow(() -> new SbcRuntimeException(MarketingErrorCode.NOT_EXIST));        if (!Objects.equals(request.getStoreId(), marketing.getStoreId())) {            throw new SbcRuntimeException("K-000018");        }        //判断活动的状态//        if (marketing.getBeginTime().isBefore(LocalDateTime.now())) {//            throw new SbcRuntimeException(MarketingErrorCode.MARKETING_STARTED_OR_ENDED);//        }        marketing.setMarketingName(request.getMarketingName());        marketing.setBeginTime(request.getBeginTime());        marketing.setEndTime(request.getEndTime());        marketing.setMarketingType(request.getMarketingType());        marketing.setSubType(request.getSubType());        marketing.setUpdatePerson(request.getUpdatePerson());        marketing.setUpdateTime(LocalDateTime.now());        marketing.setJoinLevel(request.getJoinLevel());        // 营销规则        marketingRepository.save(marketing);        // 先删除已有的营销和商品关联关系，然后再保存        marketingScopeRepository.deleteByMarketingId(marketing.getMarketingId());        // 自定义商品才需要保存        if (request.getScopeType() == MarketingScopeType.SCOPE_TYPE_CUSTOM) {            this.saveScopeList(request.generateMarketingScopeList(marketing.getMarketingId()));        }        return marketing;    }    /**     * 参数校验     *     * @param request     */    private void validParam(MarketingSaveRequest request) {        boolean invalidParam = true;        if (request.getMarketingType() == MarketingType.REDUCTION) {            invalidParam =                    request.getSubType() != MarketingSubType.REDUCTION_FULL_AMOUNT && request.getSubType() != MarketingSubType.REDUCTION_FULL_COUNT;        } else if (request.getMarketingType() == MarketingType.DISCOUNT) {            invalidParam =                    request.getSubType() != MarketingSubType.DISCOUNT_FULL_AMOUNT && request.getSubType() != MarketingSubType.DISCOUNT_FULL_COUNT;        } else if (request.getMarketingType() == MarketingType.GIFT) {            invalidParam =                    request.getSubType() != MarketingSubType.GIFT_FULL_AMOUNT && request.getSubType() != MarketingSubType.GIFT_FULL_COUNT;        } else if (request.getMarketingType() == MarketingType.BUYOUT_PRICE) {//一口价优惠活动            invalidParam =                    request.getSubType() != MarketingSubType.BUYOUT_PRICE && request.getSubType() != MarketingSubType.BUYOUT_PRICE;        } else if (request.getMarketingType() == MarketingType.HALF_PRICE_SECOND_PIECE) {//一口价优惠活动            invalidParam =                    request.getSubType() != MarketingSubType.HALF_PRICE_SECOND_PIECE && request.getSubType() != MarketingSubType.HALF_PRICE_SECOND_PIECE;        } else if (request.getMarketingType() == MarketingType.SUITS) {            invalidParam = request.getSubType() != MarketingSubType.SUITS_GOODS && request.getSubType() != MarketingSubType.SUITS_GOODS;        } else if (request.getMarketingType() == MarketingType.MARKUP) {            invalidParam = request.getSubType() != MarketingSubType.MARKUP ;        } else if (request.getMarketingType() == MarketingType.POINT_BUY) {            invalidParam = request.getSubType() != MarketingSubType.POINT_BUY;        }        if (invalidParam) {            throw new SbcRuntimeException(CommonErrorCode.PARAMETER_ERROR);        }        // 自定义商品才需要校验        // 一口价，第二件半价，组合购不走校验        if (request.getSubType() != MarketingSubType.BUYOUT_PRICE                && request.getSubType() != MarketingSubType.HALF_PRICE_SECOND_PIECE                && request.getScopeType() == MarketingScopeType.SCOPE_TYPE_CUSTOM && request.getMarketingType() != MarketingType.SUITS) {            List<String> existsList = marketingRepository.getExistsSkuByMarketingType(request.getSkuIds(), request.getMarketingType(), request.getBeginTime(), request.getEndTime(), request.getStoreId(), request.getMarketingId());            if (!existsList.isEmpty()) {                throw new SbcRuntimeException(MarketingErrorCode.MARKETING_GOODS_TIME_CONFLICT,                        new Object[]{existsList.size()});            }        }    }    /**     * 保存营销和商品关联关系     */    private void saveScopeList(List<MarketingScope> marketingScopeList) {        if (CollectionUtils.isNotEmpty(marketingScopeList)) {            marketingScopeRepository.saveAll(marketingScopeList);        } else {            throw new SbcRuntimeException("K-000009");        }    }    /**     * 删除营销活动     *     * @param marketingId     * @return     */    @Transactional    public int deleteMarketingById(Long marketingId) {        return marketingRepository.deleteMarketing(marketingId);    }    /**     * 暂停营销活动     *     * @param marketingId     * @return     */    @Transactional    public int pauseMarketingById(Long marketingId) {        return marketingRepository.pauseOrStartMarketing(marketingId, BoolFlag.YES);    }    /**     * 启动营销活动     *     * @param marketingId     * @return     */    @Transactional    public int startMarketingById(Long marketingId) {        return marketingRepository.pauseOrStartMarketing(marketingId, BoolFlag.NO);    }    /**     * 获取营销实体     *     * @param marketingId     * @return     */    public Marketing queryById(Long marketingId) {        return marketingRepository.findById(marketingId).get();    }    public List<Marketing> queryByIds(List<Long> marketingIds) {        return marketingRepository.findAllById(marketingIds);    }    // 关联营销活动级别    private void joinMarketingLevels(Marketing marketing, MarketingResponse marketingResponse) {        switch (marketing.getMarketingType()) {            case REDUCTION:                marketingResponse.setFullReductionLevelList(marketingFullReductionLevelRepository.findByMarketingIdOrderByFullAmountAscFullCountAsc(marketing.getMarketingId()));                break;            case DISCOUNT:                marketingResponse.setFullDiscountLevelList(marketingFullDiscountLevelRepository.findByMarketingIdOrderByFullAmountAscFullCountAsc(marketing.getMarketingId()));                break;            case GIFT:                marketingResponse.setFullGiftLevelList(marketingFullGiftService.getLevelsByMarketingId(marketing.getMarketingId()));                break;            case BUYOUT_PRICE:                marketingResponse.setBuyoutPriceLevelList(marketingBuyoutPriceLevelRepository.findByMarketingIdOrderByFullAmountAsc(marketing.getMarketingId()));                break;            case HALF_PRICE_SECOND_PIECE:                marketingResponse.setHalfPriceSecondPieceLevel(halfPriceSecondPieceLevelRepository.findByMarketingIdOrderByNumberAsc(marketing.getMarketingId()));                break;            case MARKUP:                marketingResponse.setMarkupLevelList(markupService.getMarkupLevel(marketing.getMarketingId()));                break;            case POINT_BUY:                marketingResponse.setPointBuyLevelList(marketingPointBuyLevelRepository.findByMarketingIdOrderByMoneyAsc(marketing.getMarketingId()));             default:                break;        }    }    // 批量关联营销活动级别    public void joinMarketingLevels(List<MarketingViewVO> vos) {        //积分换购        List<Long> pointIds = vos.stream().filter(m -> MarketingType.POINT_BUY.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId).collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(pointIds)) {            List<MarketingPointBuyLevel> levels = marketingPointBuyLevelRepository.findAllByMarketingIdIn(pointIds);//            List<MarketingFullReductionLevel> levels = marketingFullReductionLevelRepository.findAll((root, cq, cb) -> root.get("marketingId").in(reductionIds));            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingPointBuyLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingPointBuyLevelVO.class);                vos.stream().filter(v -> pointIds.contains(v.getMarketingId()))                        .forEach(v -> v.setPointBuyLevelList(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        //批量满减        List<Long> reductionIds = vos.stream()                .filter(m -> MarketingType.REDUCTION.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(reductionIds)) {            List<MarketingFullReductionLevel> levels = marketingFullReductionLevelRepository.findAll((root, cq, cb) -> root.get("marketingId").in(reductionIds));            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingFullReductionLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingFullReductionLevelVO.class);                vos.stream().filter(v -> reductionIds.contains(v.getMarketingId()))                        .forEach(v -> v.setFullReductionLevelList(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        //批量满折        List<Long> discountIds = vos.stream()                .filter(m -> MarketingType.DISCOUNT.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(discountIds)) {            List<MarketingFullDiscountLevel> levels = marketingFullDiscountLevelRepository.findAll((root, cq, cb) -> root.get("marketingId").in(discountIds));            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingFullDiscountLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingFullDiscountLevelVO.class);                vos.stream().filter(v -> discountIds.contains(v.getMarketingId()))                        .forEach(v -> v.setFullDiscountLevelList(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        //批量满赠        List<Long> giftIds = vos.stream()                .filter(m -> MarketingType.GIFT.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(giftIds)) {            List<MarketingFullGiftLevel> levels = marketingFullGiftService.getLevelsByMarketingIds(giftIds);            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingFullGiftLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingFullGiftLevelVO.class);                vos.stream().filter(v -> giftIds.contains(v.getMarketingId()))                        .forEach(v -> v.setFullGiftLevelList(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        //批量一口价        List<Long> buyoutIds = vos.stream()                .filter(m -> MarketingType.BUYOUT_PRICE.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(buyoutIds)) {            List<MarketingBuyoutPriceLevel> levels = marketingBuyoutPriceLevelRepository.findAll((root, cq, cb) -> root.get("marketingId").in(buyoutIds));            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingBuyoutPriceLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingBuyoutPriceLevelVO.class);                vos.stream().filter(v -> buyoutIds.contains(v.getMarketingId()))                        .forEach(v -> v.setBuyoutPriceLevelList(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        //批量第二件半价        List<Long> halfIds = vos.stream()                .filter(m -> MarketingType.HALF_PRICE_SECOND_PIECE.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(halfIds)) {            List<MarketingHalfPriceSecondPieceLevel> levels = halfPriceSecondPieceLevelRepository.findAll((root, cq, cb) -> root.get("marketingId").in(halfIds));            if (CollectionUtils.isNotEmpty(levels)) {                List<MarketingHalfPriceSecondPieceLevelVO> levelVOS = KsBeanUtil.convert(levels, MarketingHalfPriceSecondPieceLevelVO.class);                vos.stream().filter(v -> halfIds.contains(v.getMarketingId()))                        .forEach(v -> v.setHalfPriceSecondPieceLevel(levelVOS.stream().filter(l -> l.getMarketingId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }        // 加价购        List<Long> markupIds = vos.stream()                .filter(m -> MarketingType.MARKUP.equals(m.getMarketingType())).map(MarketingViewVO::getMarketingId)                .collect(Collectors.toList());        if(CollectionUtils.isNotEmpty(markupIds)) {            List<MarkupLevel> markupLevelList = markupService.getMarkupLevelList(markupIds);            if (CollectionUtils.isNotEmpty(markupLevelList)) {                List<MarkupLevelVO> levelVOS = KsBeanUtil.convert(markupLevelList, MarkupLevelVO.class);                vos.stream().filter(v -> markupIds.contains(v.getMarketingId()))                        .forEach(v -> v.setMarkupLevelList(levelVOS.stream().filter(l -> l.getMarkupId().equals(v.getMarketingId())).collect(Collectors.toList())));            }        }    }    /**     * 将营销活动集合，map成 { goodsId - list<Marketing> } 结构     *     * @param marketingRequest     * @return     */    @Transactional    public Map<String, List<MarketingResponse>> getMarketingMapByGoodsId(MarketingRequest marketingRequest) {        Map<String, List<MarketingResponse>> map = new HashMap<>();        List<Marketing> marketingList = marketingRepository.findAll(marketingRequest.getWhereCriteria());        if (marketingList != null && !marketingList.isEmpty()) {            //关联活动级别            List<MarketingResponse> marketingResponseList = marketingList.stream().map(marketing -> {                MarketingResponse marketingResponse = new MarketingResponse();                BeanUtils.copyProperties(marketing, marketingResponse);                if (marketingRequest.getCascadeLevel() != null && marketingRequest.getCascadeLevel()) {                    joinMarketingLevels(marketing, marketingResponse);                }                return marketingResponse;            }).collect(Collectors.toList());//        List<Marketing> allScopeMarketingList = marketingRepository.findByStoreIdAndScopeType(storeId,//        MarketingScopeType.SCOPE_TYPE_ALL);            marketingResponseList.stream().forEach(marketing -> marketing.getMarketingScopeList().stream().forEach(scope -> {                if (marketingRequest.getGoodsInfoIdList().contains(scope.getScopeId())) {                    List<MarketingResponse> list;                    if (map.get(scope.getScopeId()) == null) {                        list = new LinkedList<>();                        map.put(scope.getScopeId(), list);                    } else {                        list = map.get(scope.getScopeId());                    }                    list.add(marketing);                }//                list.addAll(allScopeMarketingList);            }));        }        return map;    }    /**     * 提供管理端使用     * 获取营销实体，包括详细信息，level，detail等     *     * @param marketingId     * @return     */    @Transactional    public MarketingResponse getMarketingByIdForSupplier(Long marketingId) {        Marketing marketing = marketingRepository.findById(marketingId).orElse(null);        MarketingResponse marketingResponse = new MarketingResponse();        // 不存在, 已删除, 未开始均认为不存在        if (marketing == null || marketing.getDelFlag() == DeleteFlag.YES) {            throw new SbcRuntimeException(MarketingErrorCode.NOT_EXIST);        }        return getManagerMarketing(marketing, marketingResponse);    }    /**     * 提供用户端使用     * 获取营销实体，包括详细信息，level，detail等     *     * @param marketingId     * @return     */    @Transactional    public MarketingResponse getMarketingByIdForCustomer(Long marketingId) {        Marketing marketing = marketingRepository.findById(marketingId).orElse(null);        MarketingResponse marketingResponse = new MarketingResponse();        // 不存在, 已删除, 未开始均认为不存在        if (marketing == null || marketing.getDelFlag() == DeleteFlag.YES ||                marketing.getBeginTime().isAfter(LocalDateTime.now())) {            throw new SbcRuntimeException(MarketingErrorCode.NOT_EXIST);        } else if (marketing.getIsPause() == BoolFlag.YES) { // 暂停            throw new SbcRuntimeException(MarketingErrorCode.MARKETING_SUSPENDED);        } else if (marketing.getEndTime().isBefore(LocalDateTime.now())) { // 结束            throw new SbcRuntimeException(MarketingErrorCode.MARKETING_OVERDUE);        }        return getMarketing(marketing, marketingResponse);    }    /**     * 管理端获取营销（和C端不同，允许获取下架 禁售 删除的商品）     *     * @param marketing     * @param marketingResponse     * @return     */    private MarketingResponse getManagerMarketing(Marketing marketing, MarketingResponse marketingResponse) {        //组装营销类型信息        joinMarketingLevels(marketing, marketingResponse);        BeanUtils.copyProperties(marketing, marketingResponse);        List<MarketingScope> scopeList = marketing.getMarketingScopeList();        marketingResponse.setMarketingScopeList(scopeList);        //组装商品信息        if (CollectionUtils.isNotEmpty(scopeList)) {            //营销活动包含的所有商品Id            List<String> goodsInfoIds = scopeList.stream().map(MarketingScope::getScopeId).collect(Collectors.toList());            //将满赠赠品的商品信息也带出            if (marketingResponse.getMarketingType() == MarketingType.GIFT && CollectionUtils.isNotEmpty(marketingResponse.getFullGiftLevelList())) {                List<String> detailGoodsInfoIds =                        marketingResponse.getFullGiftLevelList().stream().flatMap(level -> level.getFullGiftDetailList().stream())                                .map(MarketingFullGiftDetail::getProductId).collect(Collectors.toList());                goodsInfoIds.addAll(detailGoodsInfoIds);            }            // 查出加价购商品            if (marketingResponse.getMarketingType() == MarketingType.MARKUP && CollectionUtils.isNotEmpty(marketingResponse.getMarkupLevelList())) {                List<String> detailGoodsInfoIds =                        marketingResponse.getMarkupLevelList().stream().flatMap(level -> level.getMarkupLevelDetailList().stream())                                .map(MarkupLevelDetail::getGoodsInfoId).collect(Collectors.toList());                goodsInfoIds.addAll(detailGoodsInfoIds);            }            //FIXME 营销是平铺展示，但是数量达到一定层级，还是需要分页，先暂时这么控制            GoodsInfoViewPageRequest queryRequest = new GoodsInfoViewPageRequest();            queryRequest.setPageSize(goodsInfoIds.size());            queryRequest.setStoreId(marketing.getStoreId());            //queryRequest.setAddedFlag(AddedFlag.YES.toValue());//上架//            queryRequest.setDelFlag(DeleteFlag.NO.toValue());//可用            List<CheckStatus> auditStatuses =new ArrayList<>();            auditStatuses.add(CheckStatus.CHECKED);//已审核            auditStatuses.add(CheckStatus.FORBADE);//禁售            queryRequest.setAuditStatuses(auditStatuses);            //queryRequest.setAuditStatus(CheckStatus.CHECKED);//已审核            queryRequest.setGoodsInfoIds(goodsInfoIds);            GoodsInfoViewPageResponse pageResponse = goodsInfoQueryProvider.pageView(queryRequest).getContext();            marketingResponse.setGoodsList(GoodsInfoResponseVO.builder()                    .goodsInfoPage(pageResponse.getGoodsInfoPage())                    .goodses(pageResponse.getGoodses())                    .brands(CollectionUtils.isEmpty(pageResponse.getBrands()) ? Collections.emptyList() :                            pageResponse.getBrands())                    .cates(pageResponse.getCates())                    .build());            StoreByIdResponse storeByIdResponse =                    storeQueryProvider.getById(StoreByIdRequest.builder().storeId(marketing.getStoreId()).build()).getContext();            if (Objects.nonNull(storeByIdResponse) && Objects.nonNull(storeByIdResponse.getStoreVO())) {                marketingResponse.setStoreName(storeByIdResponse.getStoreVO().getStoreName());            }        }        return marketingResponse;    }    /**     * C端获取营销     *     * @param marketing     * @param marketingResponse     * @return     */    private MarketingResponse getMarketing(Marketing marketing, MarketingResponse marketingResponse) {        //组装营销类型信息        joinMarketingLevels(marketing, marketingResponse);        BeanUtils.copyProperties(marketing, marketingResponse);        List<MarketingScope> scopeList = marketing.getMarketingScopeList();        marketingResponse.setMarketingScopeList(scopeList);        //组装商品信息        if (CollectionUtils.isNotEmpty(scopeList)) {            //营销活动包含的所有商品Id            List<String> goodsInfoIds = scopeList.stream().map(MarketingScope::getScopeId).collect(Collectors.toList());            //将满赠赠品的商品信息也带出            if (marketingResponse.getMarketingType() == MarketingType.GIFT && CollectionUtils.isNotEmpty(marketingResponse.getFullGiftLevelList())) {                List<String> detailGoodsInfoIds =                        marketingResponse.getFullGiftLevelList().stream().flatMap(level -> level.getFullGiftDetailList().stream())                                .map(MarketingFullGiftDetail::getProductId).collect(Collectors.toList());                goodsInfoIds.addAll(detailGoodsInfoIds);            }            //FIXME 营销是平铺展示，但是数量达到一定层级，还是需要分页，先暂时这么控制            GoodsInfoViewPageRequest queryRequest = new GoodsInfoViewPageRequest();            queryRequest.setPageSize(10000);            queryRequest.setStoreId(marketing.getStoreId());            queryRequest.setAddedFlag(AddedFlag.YES.toValue());//上架            queryRequest.setDelFlag(DeleteFlag.NO.toValue());//可用            queryRequest.setAuditStatus(CheckStatus.CHECKED);//已审核            queryRequest.setGoodsInfoIds(goodsInfoIds);            GoodsInfoViewPageResponse pageResponse = goodsInfoQueryProvider.pageView(queryRequest).getContext();            marketingResponse.setGoodsList(GoodsInfoResponseVO.builder()                    .goodsInfoPage(pageResponse.getGoodsInfoPage())                    .goodses(pageResponse.getGoodses())                    .brands(CollectionUtils.isEmpty(pageResponse.getBrands()) ? Collections.emptyList() :                            pageResponse.getBrands())                    .cates(pageResponse.getCates())                    .build());            StoreByIdResponse storeByIdResponse =                    storeQueryProvider.getById(StoreByIdRequest.builder().storeId(marketing.getStoreId()).build()).getContext();            if (Objects.nonNull(storeByIdResponse) && Objects.nonNull(storeByIdResponse.getStoreVO())) {                marketingResponse.setStoreName(storeByIdResponse.getStoreVO().getStoreName());            }        }        return marketingResponse;    }    /**     * 获取营销对应的商品信息     *     * @param marketingId     * @return     */    @Transactional    public GoodsInfoResponse getGoodsByMarketingId(Long marketingId) {        Marketing marketing = marketingRepository.findById(marketingId).orElse(null);        if (marketing != null && marketing.getDelFlag() == DeleteFlag.NO) {            List<MarketingScope> scopeList = marketing.getMarketingScopeList();            if (CollectionUtils.isNotEmpty(scopeList)) {                List<String> goodsInfoIds =                        scopeList.stream().map(MarketingScope::getScopeId).collect(Collectors.toList());                GoodsInfoViewPageRequest queryRequest = new GoodsInfoViewPageRequest();                //FIXME 营销是平铺展示，但是数量达到一定层级，还是需要分页，先暂时这么控制                queryRequest.setPageSize(10000);                queryRequest.setStoreId(marketing.getStoreId());                queryRequest.setAddedFlag(AddedFlag.YES.toValue());//上架                queryRequest.setDelFlag(DeleteFlag.NO.toValue());//可用                queryRequest.setAuditStatus(CheckStatus.CHECKED);//已审核                queryRequest.setGoodsInfoIds(goodsInfoIds);                GoodsInfoViewPageResponse pageResponse = goodsInfoQueryProvider.pageView(queryRequest).getContext();                return GoodsInfoResponse.builder()                        .goodsInfoPage(pageResponse.getGoodsInfoPage())                        .brands(pageResponse.getBrands())                        .cates(pageResponse.getCates())                        .goodses(pageResponse.getGoodses())                        .build();            } else {                return new GoodsInfoResponse();            }        } else {            throw new SbcRuntimeException(MarketingErrorCode.NOT_EXIST);        }    }    /**     * 获取验证进行中的营销     *     * @param marketingIds 参数     */    public List<String> queryStartingMarketing(List<Long> marketingIds) {        return marketingRepository.queryStartingMarketing(marketingIds);    }    /**     * 根据skuId获取进行中组合购活动的id     * @param skuId     * @param startTime     * @param endTime     * @param storeId     * @param excludeId     * @return     */    public List<String> getMarketingSuitsExists(String skuId, LocalDateTime startTime, LocalDateTime endTime, Long storeId, Long excludeId){        return marketingRepository.getMarketingSuitsExists(skuId, startTime, endTime, storeId, excludeId);    }    /**     * 根据skuId查询正在进行中的组合购活动     * @param skuId     * @return     */    public List<Marketing> getMarketingBySuitsSkuId(String skuId){        return marketingRepository.getMarketingBySuitsSkuId(skuId);    }    /**     * 根据skuId查询进行中和未开始的组合购活动     *     * @param skuId     * @return     */    public List<Marketing> getMarketingNotEndBySuitsSkuId(String skuId) {        return marketingRepository.getMarketingNotEndBySuitsSkuId(skuId);    }    /**     * 模糊搜索营销列表     *     * @param request     * @return     */    public MicroServicePage<MarketingPageVO> searchMarketingPage(MarketingBuyoutPriceSearchRequest request,                                                                 List<Long> listStoreId,Long storeId) {        String sql = "SELECT t.* FROM marketing t ";        //查询记录的总数量        String countSql = "SELECT count(1) count FROM marketing t ";        //条件查询        String whereSql = "WHERE 1 = 1  AND t.del_flag = 0";        if (StringUtils.isNotBlank(request.getMarketingName())) {            whereSql += " AND t.marketing_name LIKE concat('%', :marketingName, '%')";        }        if (request.getStartTime() != null) {            whereSql += " AND :startTime <= t.begin_time ";        }        //营销数据店铺隔离        if (storeId != null) {            whereSql += " AND t.store_id = :storeId";        }        if (request.getEndTime() != null) {            whereSql += " AND :endTime >= t.end_time ";        }        if (request.getMarketingSubType() != null) {            whereSql += " AND t.sub_type = :marketingSubType";        }        if(Objects.nonNull(request.getPlatform())){            String joinLevel;            if(Platform.SUPPLIER.equals(request.getPlatform()) && request.getTargetLevelId() != null) {                joinLevel = " AND find_in_set( :targetLevelId , t.join_level)";                whereSql +=joinLevel;            } else if (Platform.BOSS.equals(request.getPlatform()) && request.getTargetLevelId() != null){                if(request.getTargetLevelId() !=-1){                    joinLevel= " AND t.join_level !=-1";                }else {                    joinLevel= " AND t.join_level = :targetLevelId";                }                whereSql +=joinLevel;            }        }        if (CollectionUtils.isNotEmpty(listStoreId)) {//店铺名称            whereSql += " AND t.store_id in (:storeIds)";        }        switch (request.getQueryTab()) {            case STARTED://进行中                whereSql += " AND now() >= t.begin_time AND now() <= t.end_time AND t.is_pause = 0";                break;            case PAUSED://暂停中                whereSql += " AND now() >= t.begin_time AND now() <= t.end_time AND t.is_pause = 1";                break;            case NOT_START://未开始                whereSql += " AND now() < t.begin_time";                break;            case ENDED://已结束                whereSql += " AND now() > t.end_time";                break;            case S_NS: // 进行中&未开始                whereSql += " AND now() <= t.end_time AND t.is_pause = 0";                break;            default:                break;        }        whereSql += " order by t.create_time desc";        Query query = entityManager.createNativeQuery(sql.concat(whereSql));        this.wrapperQueryParam(query, request, listStoreId, storeId);        query.setFirstResult(request.getPageNum() * request.getPageSize());        query.setMaxResults(request.getPageSize());        query.unwrap(SQLQuery.class).addEntity("t", Marketing.class);        List<MarketingPageVO> responsesList = ((List<Marketing>) query.getResultList()).stream().map(source -> {            MarketingPageVO response = new MarketingPageVO();            BeanUtils.copyProperties(source, response);            return response;        }).collect(Collectors.toList());        long count = 0;        if (CollectionUtils.isNotEmpty(responsesList)) {            Query queryCount = entityManager.createNativeQuery(countSql.concat(whereSql));            this.wrapperQueryParam(queryCount, request, listStoreId, storeId);            count = Long.parseLong(queryCount.getSingleResult().toString());        }        return new MicroServicePage<>(responsesList, request.getPageable(), count);    }    /**     * 组装查询参数     *     * @param query     * @param request     */    private void wrapperQueryParam(Query query, MarketingQueryListRequest request, Long storeId) {        if (StringUtils.isNotBlank(request.getMarketingName())) {            query.setParameter("marketingName", request.getMarketingName());        }        if (storeId != null) {            query.setParameter("storeId", storeId);        }        if (request.getDelFlag() != null) {            query.setParameter("delFlag", request.getDelFlag().toValue());        }        if (request.getMarketingType() != null) {            query.setParameter("marketingType", request.getMarketingType().toValue());        }        if (CollectionUtils.isNotEmpty(request.getMarketingTypeList())) {            List<String> value = request.getMarketingTypeList().stream().map(s -> String.valueOf(s.toValue())).collect(Collectors.toList());            query.setParameter("marketingTypeList", value);        }        if (request.getMarketingSubType() != null) {            query.setParameter("marketingSubType", request.getMarketingSubType().toValue());        }        if (request.getStartTime() != null) {            query.setParameter("startTime", DateUtil.format(request.getStartTime(), DateUtil.FMT_TIME_1));        }        if (request.getEndTime() != null) {            query.setParameter("endTime", DateUtil.format(request.getEndTime(), DateUtil.FMT_TIME_1));        }        if (request.getTargetLevelId() != null) {            query.setParameter("targetLevelId", request.getTargetLevelId());        }        if (CollectionUtils.isNotEmpty(request.getStoreIds())) {            query.setParameter("storeIds", request.getStoreIds());        }    }    /**     * 组装查询参数     *     * @param query     * @param request     */    private void wrapperQueryParam(Query query, MarketingBuyoutPriceSearchRequest request, List<Long> listStoreId, Long storeId) {        if (StringUtils.isNotBlank(request.getMarketingName())) {            query.setParameter("marketingName", request.getMarketingName());        }        //营销数据店铺隔离        if (storeId != null) {            query.setParameter("storeId", storeId);        }        if (request.getStartTime() != null) {            query.setParameter("startTime", DateUtil.format(request.getStartTime(), DateUtil.FMT_TIME_1));        }        if (request.getEndTime() != null) {            query.setParameter("endTime", DateUtil.format(request.getEndTime(), DateUtil.FMT_TIME_1));        }        if (request.getMarketingSubType() != null) {            query.setParameter("marketingSubType", request.getMarketingSubType().toValue());        }        if(Objects.nonNull(request.getPlatform())){            if(Platform.SUPPLIER.equals(request.getPlatform()) && request.getTargetLevelId() != null) {                query.setParameter("targetLevelId", request.getTargetLevelId());            } else if (Platform.BOSS.equals(request.getPlatform()) && request.getTargetLevelId() != null){                if(request.getTargetLevelId() !=-1){                //                }else {                    query.setParameter("targetLevelId", request.getTargetLevelId());                }            }        }        if (CollectionUtils.isNotEmpty(listStoreId)) {//店铺名称            query.setParameter("storeIds", listStoreId);        }    }    /**     * 模糊搜索营销列表     *     * @param request     * @return     */    public Page<Marketing> page(MarketingBuyoutPriceSearchRequest request,                                List<Long> listStoreId,Long storeId) {        request.setStoreIds(listStoreId);        request.setStoreId(storeId);        return marketingRepository.findAll(getWhereCriteria(request),request.getPageRequest());    }    public Specification<Marketing>  getWhereCriteria(MarketingBuyoutPriceSearchRequest request) {        return (root, cquery, cbuild) -> {            List<Predicate> predicates = new ArrayList<>();            if (StringUtils.isNotBlank(request.getMarketingName())) {                predicates.add(cbuild.like(root.get("marketingName"),                        StringUtil.SQL_LIKE_CHAR.concat(XssUtils.replaceLikeWildcard(request.getMarketingName().trim())).concat(StringUtil.SQL_LIKE_CHAR)));            }            if (Objects.nonNull(request.getStartTime())) {                Predicate p1 = cbuild.greaterThanOrEqualTo(root.get("beginTime"), request.getStartTime());                predicates.add(p1);            }            if (Objects.nonNull(request.getEndTime())) {                Predicate p1 = cbuild.lessThanOrEqualTo(root.get("endTime"), request.getEndTime());                predicates.add(p1);            }            if (Objects.nonNull(request.getEndTimeBegin())) {                Predicate p1 = cbuild.greaterThan(root.get("endTime"), request.getEndTimeBegin());                predicates.add(p1);            }            if (Objects.nonNull(request.getStoreId())) {                predicates.add(cbuild.equal(root.get("storeId"), request.getStoreId()));            }            if (request.getMarketingSubType() != null) {                predicates.add(cbuild.equal(root.get("subType"), request.getMarketingSubType().toValue()));            }            if(Objects.nonNull(request.getPlatform())){                if(Platform.SUPPLIER.equals(request.getPlatform()) && request.getTargetLevelId() != null) {                    Expression<Integer> expression = cbuild.function("FIND_IN_SET", Integer.class, cbuild.literal(request.getTargetLevelId()), root.get("joinLevel"));                    predicates.add(cbuild.greaterThan(expression, 0));                } else if (Platform.BOSS.equals(request.getPlatform()) && request.getTargetLevelId() != null){                    if(request.getTargetLevelId() == 0){                        //部分客户的值是0或者某些等级，不会包含"-"                        predicates.add(cbuild.notLike(root.get("joinLevel"), "-%"));                    }else {                        predicates.add(cbuild.equal(root.get("joinLevel"), request.getTargetLevelId()));                    }                }            }            if (CollectionUtils.isNotEmpty(request.getStoreIds())) {                predicates.add(root.get("storeId").in(request.getStoreIds()));            }            if(Objects.nonNull(request.getQueryTab())) {                switch (request.getQueryTab()) {                    case STARTED://进行中                        predicates.add(cbuild.lessThanOrEqualTo(root.get("beginTime"), LocalDateTime.now()));                        predicates.add(cbuild.greaterThanOrEqualTo(root.get("endTime"), LocalDateTime.now()));                        predicates.add(cbuild.equal(root.get("isPause"), 0));                        break;                    case PAUSED://暂停中                        predicates.add(cbuild.lessThanOrEqualTo(root.get("beginTime"), LocalDateTime.now()));                        predicates.add(cbuild.greaterThanOrEqualTo(root.get("endTime"), LocalDateTime.now()));                        predicates.add(cbuild.equal(root.get("isPause"), 1));                        break;                    case NOT_START://未开始                        predicates.add(cbuild.greaterThan(root.get("beginTime"), LocalDateTime.now()));                        break;                    case ENDED://已结束                        predicates.add(cbuild.lessThan(root.get("endTime"), LocalDateTime.now()));                        break;                    case S_NS: // 进行中&未开始                        predicates.add(cbuild.greaterThanOrEqualTo(root.get("endTime"), LocalDateTime.now()));                        predicates.add(cbuild.equal(root.get("isPause"), 0));                        break;                    default:                        break;                }            }            predicates.add(cbuild.equal(root.get("delFlag"), 0));            Predicate[] p = predicates.toArray(new Predicate[predicates.size()]);            return p.length == 0 ? null : p.length == 1 ? p[0] : cbuild.and(p);        };    }}